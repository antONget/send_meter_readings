from aiogram import Bot, types, F, Router
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from utils.list_keyboard_select_item import utils_handler_pagination_and_select_item
import logging

from config_data.config import Config, load_config
from keyboard import personal_keyboards, admin_keyboards
from database import requests


config: Config = load_config()
router = Router()

button_list = config.tg_bot.button_list


class FSMFillForm(StatesGroup):
    get_ident = State()
    get_date_time = State()
    get_ident_for_mailing = State()
    get_text_to_mailing = State()
    fill_mailing = State()
    get_photo_to_report = State()
    get_photo_to_report_choice = State()
    get_failure_report = State()
    get_new_report_day = State()

    get_personal_id = State()
    get_report_day_for_new = State()
    get_ident_for_add_new = State()


def extract_arg(arg):
    return arg.split()[1:]


@router.message(Command('start'))
async def start(message: types.Message):
    logging.info('start')
    command = extract_arg(message.text)
    user_id = str(message.from_user.id)
    admin_id_list = str(config.tg_bot.admin_ids).split(',')
    if user_id in admin_id_list:

        markup = admin_keyboards.main_admin_buttons()
        await message.answer(text='–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                             reply_markup=markup)

    if user_id not in admin_id_list:
        if command:
            command = int(command[0])

            if requests.check_personal(command):
                requests.insert_personl_id_and(command, user_id)
                data = requests.check_personal_without_comand(user_id)
                if len(data) == 1:
                    name = data[0][0]
                    time = data[0][1]
                    await message.answer(text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å,–≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø–æ–º–µ—â–µ–Ω–∏–µ "{name}"\n\n'
                                              f'–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∂–¥–æ–µ {time} —á–∏—Å–ª–æ',
                                         reply_markup=personal_keyboards.main_button_personal())

                else:
                    text = '–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø–æ–º–µ—â–µ–Ω–∏—è:\n'
                    objects = []
                    report_days = []

                    for elem in data:
                        objects.append(elem[0])
                        report_days.append(elem[1])

                    for object_ in objects:
                        text += f'{objects.index(object_)+1}) {object_}\n'

                    text += '–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á–µ—Ç—ã\n'
                    for day in report_days:
                        text += f'{report_days.index(day)+1}) {day} —á–∏—Å–ª–æ\n'

                    await message.answer(text=text,
                                         reply_markup=personal_keyboards.main_button_personal())
            else:
                await message.answer('–ù–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ–ª–æ–≤–µ–∫')
        else:
            if requests.check_personal_without_comand(user_id):
                data = requests.check_personal_without_comand(user_id)
                if len(data) == 1:
                    name = data[0][0]
                    time = data[0][1]

                    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å,–≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø–æ–º–µ—â–µ–Ω–∏–µ "{name}"\n\n'
                                         f'–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∂–¥–æ–µ {time} —á–∏—Å–ª–æ',
                                         reply_markup=personal_keyboards.main_button_personal())
                else:
                    text = '–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –ø–æ–º–µ—â–µ–Ω–∏—è:\n'
                    objects = []
                    report_days = []
                    for elem in data:
                        objects.append(elem[0])
                        report_days.append(elem[1])
                    for object_ in objects:
                        text += f'{objects.index(object_)+1}) {object_}\n'
                    text += '\n–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ—Ç—á–µ—Ç—ã\n'
                    for day in report_days:
                        text += f'{report_days.index(day)+1}) {day} —á–∏—Å–ª–æ\n'

                    await message.answer(text=text,
                                         reply_markup=personal_keyboards.main_button_personal())
            else:
                await message.answer(text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º')


@router.callback_query(or_f(F.data.startswith('–ü—Ä–∏–Ω—è—Ç—å'),
                            F.data.startswith('–ü–µ—Ä–µ—Å–Ω—è—Ç—å')))
async def answer_to_report(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    logging.info('answer_to_report')
    ids_list = requests.get_all_personal_ids()
    for id_ in ids_list:
        if callback.data == f'–ü—Ä–∏–Ω—è—Ç—å {id_[0]}':
            await callback.answer()
            await callback.message.answer('–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
            await bot.send_message(chat_id=id_[0],
                                   text='–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç!')
            break

        if callback.data == f'–ü–µ—Ä–µ—Å–Ω—è—Ç—å {id_[0]}':
            await callback.answer()
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞')
            await state.update_data(user_input=id_[0])
            await state.set_state(FSMFillForm.get_failure_report)
            break


@router.message(StateFilter(FSMFillForm.get_failure_report))
async def get_failure_report(message: types.Message,
                             state: FSMContext,
                             bot: Bot):
    logging.info('get_failure_report')
    if str(message.text) not in button_list:
        message_to_report = message.text
        message_to_report = '–û—Ç—á–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç, –ø—Ä–∏—á–∏–Ω–∞:\n' + message_to_report

        pers_id_cort = await state.get_data()
        pers_id = pers_id_cort['user_input']

        await bot.send_message(chat_id=pers_id, text=message_to_report)
        await message.answer('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
        await state.clear()

    else:
        await main_admin(message, state)
        await state.clear()


@router.message(or_f(F.text == '–í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω üì±',
                     F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïë',
                     F.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üßë‚Äçüíª',
                     F.text == '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É üö∂'),
                StateFilter(default_state))
async def main_admin(message: types.Message, state: FSMContext):
    logging.info('main_admin')
    if message.text == '–í—ã–¥–∞—Ç—å —Ç–æ–∫–µ–Ω üì±':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è')
        await state.set_state(FSMFillForm.get_ident)

    if message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üßë‚Äçüíª':
        await message.answer(text='–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏–ª–∏ –æ–¥–Ω–æ–º—É',
                             reply_markup=admin_keyboards.rassylka_buttons())

    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è üïë':
        ident_list = requests.get_premises_ident()
        await utils_handler_pagination_and_select_item(list_items=ident_list,
                                                       text_message_pagination='–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏',
                                                       text_message_select='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è'
                                                                           ' –æ–±—ä–µ–∫—Ç–∞',
                                                       page=0,
                                                       count_item_page=3,
                                                       callback_prefix_select='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ',
                                                       callback_prefix_back='back_ident',
                                                       callback_prefix_next='next_ident',
                                                       callback=None,
                                                       message=message)
        # markup = admin_keyboards.ident_list_first_page(ident_list)
        # await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n'
        #                           f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{int(len(ident_list)/2)+1}',
        #                      reply_markup=markup)

    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É üö∂':
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ telegram id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è\n'
                                  '–ü–æ–ª—É—á–∏—Ç—å telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞:\n'
                                  '@getmyid_bot –∏–ª–∏ @username_to_id_bot',
                             reply_markup=None)
        await state.set_state(FSMFillForm.get_personal_id)


@router.message(StateFilter(FSMFillForm.get_personal_id))
async def get_peronal_id_for_new(message: types.Message, state: FSMContext):
    logging.info('get_peronal_id_for_new')
    if str(message.text) not in button_list:
        personal_id = message.text
        personal_ids_list = requests.get_all_personal_ids()
        for id_ in personal_ids_list:
            if str(personal_id) == str(id_[0]):
                await state.update_data(personal_id=message.text)
                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–º–µ—â–µ–Ω–∏—è')
                await state.set_state(FSMFillForm.get_ident_for_add_new)
                break
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ id –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑')
            await state.set_state(FSMFillForm.get_personal_id)

    else:
        await main_admin(message=message, state=state)
        await state.clear()


@router.message(StateFilter(FSMFillForm.get_ident_for_add_new))
async def get_ident_for_add_new(message: types.Message, state: FSMContext):
    logging.info('get_ident_for_add_new')
    if str(message.text) not in button_list:
        await state.update_data(ident=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç—á–µ—Ç')
        await state.set_state(FSMFillForm.get_report_day_for_new)
    else:
        await main_admin(message=message, state=state)
        await state.clear()


@router.message(StateFilter(FSMFillForm.get_report_day_for_new))
async def get_ident_for_add_new(message: types.Message, state: FSMContext, bot: Bot):
    logging.info('get_ident_for_add_new')
    if str(message.text) not in button_list:
        try:
            int_message = int(message.text)
            if 1 <= int_message <= 31:
                report_day = message.text
                ident = await state.get_data()
                ident = ident['ident']
                personal_id = await state.get_data()
                personal_id = personal_id['personal_id']
                requests.add_another_oject_to_personal(ident=ident, personal_id=personal_id, day=report_day)

                await message.answer('–û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É')
                await bot.send_message(chat_id=personal_id,
                                       text=f'–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç: "{ident}"\n'
                                            f'–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∂–¥–æ–µ {report_day} —á–∏—Å–ª–æ')
                await state.clear()

            else:
                await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
                await state.set_state(FSMFillForm.get_report_day_for_new)

        except Exception as e:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.set_state(FSMFillForm.get_report_day_for_new)

    else:
        await main_admin(message=message, state=state)
        await state.clear()


@router.callback_query(or_f(F.data.startswith('next_ident'),
                            F.data.startswith('back_ident')))
async def pagination_ident(callback: types.CallbackQuery):
    logging.info(f'pagination_ident {callback.data}')
    page = int(callback.data.split('_')[-1])
    ident_list = requests.get_premises_ident()
    await utils_handler_pagination_and_select_item(list_items=ident_list,
                                                   text_message_pagination='–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏',
                                                   text_message_select='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞',
                                                   page=page,
                                                   count_item_page=3,
                                                   callback_prefix_select='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ',
                                                   callback_prefix_back='back_ident',
                                                   callback_prefix_next='next_ident',
                                                   callback=callback,
                                                   message=None)
#     ident_list = requests.get_premises_ident()
#     print(ident_list)
#     for ident in ident_list:
#         page = int(ident_list.index(ident)/2)
#         print(page)
#         if callback.data == f'forward_ident_{page}':
#             markup = admin_keyboards.ident_list_mid_and_last_page(ident_list=ident_list, page=page)
#             await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n'
#                                                   f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{int(len(ident_list)/2)+1}',
#                                              reply_markup=markup)
#         if callback.data == f'back_ident_{page}':
#             if page == 0:
#                 markup = admin_keyboards.ident_list_first_page(ident_list)
#                 await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n'
#                                                       f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{int(len(ident_list) / 2) + 1}',
#                                                  reply_markup=markup)
#
#             else:
#                 markup = admin_keyboards.ident_list_mid_and_last_page(ident_list=ident_list, page=page)
#                 await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n'
#                                                       f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{int(len(ident_list)/2)+1}',
#                                                  reply_markup=markup)
#     await callback.answer()


@router.callback_query(F.data.startswith('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ_'))
async def get_ident_to_change_day(callback: types.CallbackQuery, state: FSMContext):
    logging.info('get_ident_to_change_day')
    ident_list = requests.get_premises_ident()
    for ident in ident_list:
        await callback.answer()
        await state.update_data(ident=ident[0])
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ "{ident[0]}"')
        await state.set_state(FSMFillForm.get_new_report_day)
        break


@router.message(StateFilter(FSMFillForm.get_new_report_day))
async def get_new_report_day(message: types.Message, state: FSMContext, bot: Bot):
    logging.info('get_new_report_day')
    if str(message.text) not in button_list:

        try:
            int_message = int(message.text)

            if 1 <= int_message <= 31:

                new_day = message.text
                ident_cort = await state.get_data()
                ident = ident_cort['ident']
                requests.update_day(ident=ident, day=new_day)
                personal_id = requests.select_personal_id_by_ident(ident)[0][0]
                await message.answer(f'–î–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è "{ident}" –∏–∑–º–µ–Ω–µ–Ω')
                try:
                    await bot.send_message(chat_id=personal_id,
                                           text=f'–î–µ–Ω—å —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è "{ident}" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_day} —á–∏—Å–ª–æ')

                except Exception as e:
                    await message.answer(text=f'–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

            else:
                await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑')
                await state.set_state(FSMFillForm.get_new_report_day)

        except Exception as e:
            await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑')
            await state.set_state(FSMFillForm.get_new_report_day)

    else:
        await main_admin(message, state)
    await state.clear()


@router.message(StateFilter(FSMFillForm.get_ident))
async def get_ident(message: types.Message, state: FSMContext):
    logging.info('get_ident')
    await state.update_data(user_input=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç—á–µ—Ç')
    await state.set_state(FSMFillForm.get_date_time)


@router.message(StateFilter(FSMFillForm.get_date_time))
async def get_data_time(message: types.Message, state: FSMContext):
    logging.info('get_data_time')
    if str(message.text) not in button_list:
        time = message.text
        ident_cort = await state.get_data()
        ident = ident_cort['user_input']
        requests.insert_data_and_ident(ident=ident, time=time)
        data = requests.get_id_for_premises(ident)
        link = f'https://t.me/{config.tg_bot.bot_name_for_link}?start={data}'
        await message.answer(text=f'–°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:<code>{link}</code>'
                                  f'\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É',
                             parse_mode='HTML')
        await state.clear()
    else:
        await main_admin(message, state)
        await state.clear()


@router.callback_query(or_f(F.data == '–í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º', F.data == '–û–¥–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É'))
async def mailing(callback: types.CallbackQuery, state: FSMContext):
    logging.info('mailing')
    if callback.data == '–û–¥–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É':
        await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ telegram id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è\n'
                                              '–ü–æ–ª—É—á–∏—Ç—å telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞:\n'
                                              '@getmyid_bot –∏–ª–∏ @username_to_id_bot',
                                         reply_markup=None)
        await state.set_state(FSMFillForm.get_ident_for_mailing)
    if callback.data == '–í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º':
        await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏',
                                         reply_markup=None)
        await state.set_state(FSMFillForm.fill_mailing)


@router.message(StateFilter(FSMFillForm.fill_mailing))
async def get_text_for_mailing(message: types.Message, state: FSMContext, bot: Bot):
    logging.info('get_text_for_mailing')
    if str(message.text) not in button_list:
        text = str(message.text)
        text = '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' + text
        ids_list = requests.get_all_personal_ids()
        for id_ in ids_list:
            try:
                await bot.send_message(chat_id=id_[0],text=text)

            except Exception as e:
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id_} –Ω–µ –æ–ø–æ–≤–µ—â–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ª–∏–±–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –µ–≥–æ')

        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º')
        await state.clear()

    else:
        await main_admin(message, state)
        await state.clear()


@router.message(StateFilter(FSMFillForm.get_ident_for_mailing))
async def get_ident_for_mailing(message: types.Message, state: FSMContext):
    logging.info('get_ident_for_mailing')
    if str(message.text) not in button_list:
        await state.update_data(user_input=message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
        await state.set_state(FSMFillForm.get_text_to_mailing)

    else:
        await main_admin(message=message, state=state)
        await state.clear()


@router.message(StateFilter(FSMFillForm.get_text_to_mailing))
async def send_message_ro_one_person(message: types.Message, state: FSMContext, bot: Bot):
    logging.info('send_message_ro_one_person')
    if str(message.text) not in button_list:
        mailing_text = message.text
        mailing_text = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n' + mailing_text
        data = await state.get_data()
        id_ = data['user_input']
        try:
            await bot.send_message(chat_id=id_,
                                   text=mailing_text)
            await state.clear()
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

        except Exception as e:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è,–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n'
                                 '1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞\n'
                                 '2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞\n'
                                 '3) –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π id\n'
                                 '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            await state.clear()

    else:
        await main_admin(message, state)
        await state.clear()
